#!/usr/bin/bash

echo "$0: Application startup at $(date)"

# ==============================================================================
# 🔥 I N I T I A L I Z E
# ==============================================================================

./init.bash || exit 1

# ==============================================================================
# ⚙️ S E T T I N G S
# ==============================================================================

set -eu || set -o errexit && set -o nounset; set -o pipefail; set +o history

cd "$(dirname "$0")" && SCRIPT_DIR="$(pwd)"
DIVIDER="$(printf '=%.0s' {1..80})" && div() {
  if [[ $# -gt 0 && ! -z "${1:-}" ]]; then echo "$(printf "$1"'%.0s' {1..80})"
  else echo "$DIVIDER"; fi
}
VERBOSE=true
UNATTENDED=false
error_code=1
ending="Application terminated."

abort() {
  ending="$1"
  exit ${2:-1}
}

cadence() {
  set +eu || set +o errexit && set +o nounset; set +o pipefail; set -o history
  [[ $error_code -ne 0 && "$ending" == "Application terminated." ]] && ending='An error occurred during application startup!'
  [[ -v ending && ! -z "$ending" ]] && echo "$0: $ending"
}; trap cadence EXIT

# ==============================================================================
# 🧬 P R E R E Q U I S I T E S
# ==============================================================================

# Clear proxy environment variables
[[ -v http_proxy ]] && unset http_proxy; [[ -v https_proxy ]] && unset https_proxy; [[ -v all_proxy ]] && unset all_proxy; [[ -v HTTP_PROXY ]] && unset HTTP_PROXY; [[ -v HTTPS_PROXY ]] && unset HTTPS_PROXY; [[ -v ALL_PROXY ]] && unset ALL_PROXY

cd "$(dirname "$0")"

# ==============================================================================
# 🐳 E N V I R O N M E N T  L O A D I N G
# ==============================================================================

echo "Loading environment configuration..."
div

if [[ ! -f ./.env ]]; then
  abort "Error: File \`.env\` doesn't exist in \`$(pwd)\` directory. Please run \`./DEPLOY\` first."
fi

# Load environment variables from .env
set -a # Automatically export all variables
source ./.env
set +a

echo "✅ Environment variables loaded"
echo "   APP_URL: ${APP_URL}"
echo "   SALEOR_API_URL: ${SALEOR_API_URL}"
echo "   APPLICATION_HOST: ${APPLICATION_HOST}"
echo "   APPLICATION_PORT: ${APPLICATION_PORT}"

# ==============================================================================
# 🐍 V I R T U A L  E N V I R O N M E N T
# ==============================================================================

echo "Activating Python virtual environment..."
div

if [[ ! -d ./env ]]; then
  abort "Error: Directory \`$(pwd)/env\` doesn't exist. Please run \`./DEPLOY\` first."
fi

source env/bin/activate
if [[ $? -ne 0 ]]; then
  abort 'Failed to activate Python virtual environment.'
fi

echo "✅ Python virtual environment activated"
echo "   Python: $(which python)"
echo "   Pip: $(which pip)"

# ==============================================================================
# 🔧 D E P E N D E N C I E S  C H E C K
# ==============================================================================

echo "Checking application dependencies..."
div

# Check if Redis is accessible
if command -v redis-cli &> /dev/null; then
  if redis-cli -u "$REDIS_URL" ping &> /dev/null; then
    echo "✅ Redis is accessible at $REDIS_URL"
  else
    echo "⚠️  Redis is not accessible at $REDIS_URL"
    echo "   Please start Redis: redis-server or docker run -d -p 6379:6379 redis:7.0"
    read -p "Continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      abort "Redis is required for the application to function properly."
    fi
  fi
else
  echo "⚠️  Redis CLI not found, skipping connectivity check"
fi

# Check if Rust module is available
echo "Checking Rust price calculator module..."
if python -c "import rust_modules.price_calculator; print('Rust module loaded successfully')" 2>/dev/null; then
  echo "✅ Rust price calculator module is available"
else
  echo "⚠️  Rust price calculator module not found"
  echo "   This may affect price calculation performance"
  echo "   Run \`./DEPLOY\` to rebuild the Rust module"
fi

# ==============================================================================
# 🚀 A P P L I C A T I O N  S T A R T U P
# ==============================================================================

echo "Starting Saleor Price Manager..."
div
echo "📋 Application Configuration:"
echo "   Host: ${APPLICATION_HOST}"
echo "   Port: ${APPLICATION_PORT}"
echo "   Reload: ${RELOAD:-true}"
echo "   Debug: ${DEBUG:-true}"
echo ""
echo "🔗 API Endpoints will be available at:"
echo "   Swagger UI:  http://${APPLICATION_HOST}:${APPLICATION_PORT}/docs"
echo "   ReDoc:       http://${APPLICATION_HOST}:${APPLICATION_PORT}/redoc"
echo "   Health:      http://${APPLICATION_HOST}:${APPLICATION_PORT}/health"
echo ""
echo "🚫 Press Ctrl+C to stop the application"
div

# Check if we should start frontend too
START_FRONTEND=${START_FRONTEND:-true}

if [[ "$START_FRONTEND" == "true" ]]; then
  echo "Starting frontend development server..."
  
  # Check if frontend dependencies are installed
  if [[ ! -d "frontend/node_modules" ]]; then
    echo "Installing frontend dependencies..."
    cd frontend
    if command -v pnpm &> /dev/null; then
      pnpm install
    else
      npm install
    fi
    cd ..
  fi
  
  # Sync backend host/port to frontend environment
  echo "Syncing API configuration to frontend..."
  API_HOST=${APPLICATION_HOST}
  # Convert local addresses to localhost for frontend (browser compatibility)
  # Both 0.0.0.0 and 127.0.0.1 should become localhost for browser access
  if [[ "$API_HOST" == "0.0.0.0" ]] || [[ "$API_HOST" == "127.0.0.1" ]]; then
    API_HOST="localhost"
  fi
  
  cat > frontend/.env << EOF
# Auto-generated from backend configuration
VITE_API_BASE_URL=http://${API_HOST}:${APPLICATION_PORT}
VITE_APP_TITLE="Saleor Price Manager"
VITE_API_TIMEOUT=10000
EOF
  
  echo "   Frontend will connect to: http://${API_HOST}:${APPLICATION_PORT}"
  
  # Start frontend in background with optimized settings
  cd frontend
  
  # Set reduced file watching to prevent OS limits
  export VITE_DISABLE_FS_WATCHER=true
  
  if command -v pnpm &> /dev/null; then
    pnpm dev &
  else
    npm run dev &
  fi
  FRONTEND_PID=$!
  cd ..
  
  echo "🌐 Frontend starting at: http://localhost:3000"
  echo "🔍 Frontend PID: $FRONTEND_PID"
  
  # Function to cleanup frontend process
  cleanup_frontend() {
    if [[ -n "$FRONTEND_PID" ]]; then
      echo "🚪 Stopping frontend server..."
      kill $FRONTEND_PID 2>/dev/null || true
    fi
  }
  
  # Set trap to cleanup frontend on script exit
  trap cleanup_frontend EXIT
fi

# Start the backend application
echo "Starting backend API server..."
if [[ "${RELOAD:-true}" == "true" ]]; then
  # Development mode with auto-reload (exclude frontend to prevent file watch limits)
  uvicorn main:app --reload --host "${APPLICATION_HOST}" --port "${APPLICATION_PORT}" \
    --reload-exclude "frontend/*" \
    --reload-exclude "frontend-react-backup/*" \
    --reload-exclude "**/node_modules/*" \
    --reload-exclude "**/.svelte-kit/*" \
    --reload-exclude "**/__pycache__/*" \
    --reload-exclude "**/.*"
else
  # Production mode
  uvicorn main:app --host "${APPLICATION_HOST}" --port "${APPLICATION_PORT}" --workers 4
fi

# ==============================================================================
# 🚧 T E R M I N A T E
# ==============================================================================

echo ""
echo "🛑 Shutting down application..."
deactivate
error_code=0
ending="Application stopped gracefully."
exit $error_code

# ==============================================================================
# 🧷 R E F E R E N C E S
# ==============================================================================

# - https://www.shellcheck.net/
# - https://chmod-calculator.com/
# - https://crontab.guru/
# - https://docs.python.org/3/library/venv.html
# - https://fastapi.tiangolo.com/deployment/manually/