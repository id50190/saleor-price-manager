#!/usr/bin/bash

echo "$0: Deployment started at $(date)"

# ==============================================================================
# üî• I N I T I A L I Z E
# ==============================================================================

./init.bash || exit 1

# ==============================================================================
# ‚öôÔ∏è S E T T I N G S
# ==============================================================================

set -eu || set -o errexit && set -o nounset; set -o pipefail; set +o history

DIVIDER="$(printf '=%.0s' {1..80})" && div() { echo "$DIVIDER"; }
VERBOSE=true
UNATTENDED=false
error_code=1 # Praesumptio
ending=Done.

abort() {
  ending=$1
  exit ${2:-1} # Default error code is 1 (common)
}

cadence() { # Callback
  set +eu || set +o errexit && set +o nounset; set +o pipefail; set -o history
  [[ $error_code -ne 0 && "$ending" == Done. ]] && ending='An error occurred during deployment!'
  [[ -v ending && ! -z "$ending" ]] && echo "$0: $ending"
}; trap cadence EXIT # Set the signal handler EXIT (to ensure a graceful cadence)

# ==============================================================================
# üß¨ P R E R E Q U I S I T E S
# ==============================================================================

# Clear proxy environment variables
[[ -v http_proxy ]] && unset http_proxy; [[ -v https_proxy ]] && unset https_proxy; [[ -v all_proxy ]] && unset all_proxy; [[ -v HTTP_PROXY ]] && unset HTTP_PROXY; [[ -v HTTPS_PROXY ]] && unset HTTPS_PROXY; [[ -v ALL_PROXY ]] && unset ALL_PROXY; [[ ! -v http_proxy && ! -v https_proxy && ! -v all_proxy && ! -v HTTP_PROXY && ! -v HTTPS_PROXY && ! -v ALL_PROXY ]] && echo 'Environment variables for proxying have been reset!'

cd "$(dirname "$0")"

# ==============================================================================
# üê≥ E N V I R O N M E N T  S E T U P
# ==============================================================================

echo "Setting up environment variables..."

# Create .env file if it doesn't exist
if [[ ! -f .env ]]; then
  echo "Creating .env file with default values..."
  cat << 'EOF' > .env
# Saleor Price Manager Configuration
APP_URL=http://127.0.0.1:8000
APP_FRONTEND_URL=http://127.0.0.1:3000
SALEOR_API_URL=https://your-instance.saleor.cloud/graphql/
REDIS_URL=redis://127.0.0.1:6379/0
CORS_ORIGINS=["http://127.0.0.1:3000", "https://your-instance.saleor.cloud"]
SALEOR_APP_TOKEN=your_saleor_app_token_here

# Application runtime settings
APPLICATION_HOST=127.0.0.1
APPLICATION_PORT=8000
APPLICATION_PORT_FRONTEND=3000

# Development settings
DEBUG=true
RELOAD=true
EOF
  echo "‚úÖ Created .env file. Please edit it with your actual values before running BANG!"
else
  echo "‚úÖ .env file already exists"
fi

# ==============================================================================
# üêç P Y T H O N  E N V I R O N M E N T
# ==============================================================================

echo "Setting up Python virtual environment..."
div

# Remove existing virtual environment
[[ -d ./env ]] && rm -rf ./env

# Create new virtual environment
python3 -m venv env

if [[ ! -d ./env ]]; then
  abort "Error: Directory \`$(pwd)/env\` doesn't exist."
fi

# Activate virtual environment
source env/bin/activate
if [[ $? -ne 0 ]]; then
  abort "Failed to activate Python virtual environment."
fi

echo "‚úÖ Virtual environment activated"

# Upgrade pip and install dependencies
echo "Installing Python dependencies..."
python3 -m pip install --upgrade pip setuptools wheel virtualenv
python3 -m pip install -r requirements.txt

echo "‚úÖ Python dependencies installed"

# ==============================================================================
# ü¶Ä R U S T  M O D U L E  B U I L D
# ==============================================================================

echo "Building Rust price calculator module..."
div

# Check if Rust is installed
if ! command -v cargo &> /dev/null; then
  echo "Installing Rust..."
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  source "$HOME/.cargo/env"
fi

# Build Rust module
cd rust_modules/price_calculator
echo "Compiling Rust module with PyO3..."
cargo build --release

# Install the Python module
pip install maturin

# Clear conflicting environment variables for maturin
if [[ -n "${CONDA_PREFIX:-}" ]]; then
  echo "üßπ Clearing CONDA_PREFIX to avoid conflicts with maturin"
  unset CONDA_PREFIX
fi

# Ensure VIRTUAL_ENV is set correctly
export VIRTUAL_ENV="$(cd ../../env && pwd)"
echo "üêç Using virtual environment: $VIRTUAL_ENV"

echo "üîß Running maturin develop..."
maturin develop --release

cd ../../
echo "‚úÖ Rust module built and installed"

# ==============================================================================
# üîß R E D I S  S E T U P
# ==============================================================================

echo "Checking Redis availability..."
div

# Check if Redis is available
if command -v redis-server &> /dev/null; then
  echo "‚úÖ Redis is available"
  # Try to ping Redis
  if redis-cli ping &> /dev/null; then
    echo "‚úÖ Redis is running"
  else
    echo "‚ö†Ô∏è  Redis is installed but not running. You may need to start it manually:"
    echo "   sudo systemctl start redis-server"
    echo "   or use Docker: docker run -d -p 6379:6379 redis:7.0"
  fi
else
  echo "‚ö†Ô∏è  Redis is not installed. Install options:"
  echo "   Ubuntu: sudo apt install redis-server"
  echo "   Docker: docker run -d -p 6379:6379 redis:7.0"
  echo "   macOS:  brew install redis"
fi

# ==============================================================================
# üåê F R O N T E N D  S E T U P
# ==============================================================================

echo "Setting up frontend dependencies..."
div

if [[ -d frontend ]]; then
  cd frontend
  
  # Check if Node.js is available
  if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    echo "‚úÖ Node.js version: $NODE_VERSION"
    
    # Install dependencies
    if command -v pnpm &> /dev/null; then
      echo "Using pnpm for package management..."
      pnpm install
    else
      echo "Using npm for package management..."
      npm install
    fi
    
    echo "‚úÖ Frontend dependencies installed"
  else
    echo "‚ö†Ô∏è  Node.js is not installed. Please install Node.js 22.x or 24.7.0"
    echo "   Download from: https://nodejs.org/"
  fi
  
  cd ..
else
  echo "‚ö†Ô∏è  Frontend directory not found"
fi

# ==============================================================================
# üìù P E R M I S S I O N S
# ==============================================================================

echo "Setting up file permissions..."
div

# Make scripts executable
[[ -f ./BANG ]] && chmod u+x ./BANG
[[ -f ./BUILD ]] && chmod u+x ./BUILD
[[ -f ./SAVE ]] && chmod u+x ./SAVE
[[ -f ./deploy.sh ]] && chmod u+x ./deploy.sh
[[ -f ./deploy.pt1.sh ]] && chmod u+x ./deploy.pt1.sh

echo "‚úÖ File permissions set"

# ==============================================================================
# üìã D E P L O Y M E N T  S U M M A R Y
# ==============================================================================

echo "Deployment Summary:"
div
echo "‚úÖ Python virtual environment: $(pwd)/env"
echo "‚úÖ Dependencies installed from requirements.txt"
echo "‚úÖ Rust price calculator module built"
echo "‚úÖ Configuration file: $(pwd)/.env"
echo "‚úÖ Executable permissions set"

if [[ -f .env ]]; then
  echo ""
  echo "üìù Next steps:"
  echo "   1. Edit .env file with your actual Saleor API credentials"
  echo "   2. Start Redis if not running: redis-server or docker run -d -p 6379:6379 redis:7.0"
  echo "   3. Run the application: ./BANG"
fi

echo ""
echo "üöÄ Deployment completed successfully!"
echo "   Run \`./BANG\` to start the application"

# ==============================================================================
# üöß T E R M I N A T E
# ==============================================================================

deactivate && error_code=0
exit $error_code # üî≥ Q.E.D.

# ==============================================================================
# üß∑ R E F E R E N C E S
# ==============================================================================

# - https://www.shellcheck.net/
# - https://chmod-calculator.com/
# - https://crontab.guru/
# - https://snarky.ca/why-you-should-use-python-m-pip/